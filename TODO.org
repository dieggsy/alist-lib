# -*- mode: org; -*
* TODO Oh, shit: we're fooled by =#f=!
* TODO We need to pivot on =(alist-ref alist key = default)=, unfortunately.
  This is, incidentally, what [[http://wiki.call-cc.org/man/4/Unit%2520data-structures#alist-ref][Chicken uses]].
* TODO =alist-merge=
  semantics of this are bizarre: how do we handle duplicate keys? do
  we replace the key, or merely append? do we allow the user to
  specify the collision-resolution?

  also, notice that the srfi-69 semantics are destructive (i.e. there
  is no =alist-merge= for hash-tables).

  why doesn't srfi-69 have to deal with collision?

  #+BEGIN_SRC scheme :tangle test-alist-merge.scm :shebang #!/usr/bin/env chicken-scheme
    (use srfi-1)
    
    ;;; fuck this; we'll do it later. it's not actually what we need right
    ;;; now.
    (define (alist-merge mergor mergendum)
      )
  #+END_SRC
* TODO issues
  riastradh's claim about alist-backed hash-tables: we'd rather have
  transparency in certain circumstances; orthogonal to the
  alist-backed hash-table question (employed by scheme48, i believe he
  said).
* TODO non-destructive versions of the below
* TODO =alist-delete-duplicates=, =alist-delete-duplicates!=
  key-based
* TODO =alist-delete=
* TODO =alist-delete!=
* TODO =alist-update=
* TODO =alist-set!= $\rightarrow$ =alist-cons!=?
* TODO =alist-for-each=
  with =(lambda (key value) ...)= semantics
* DONE =alist-fold=
  CLOSED: [2011-02-21 Mon 23:40]
  with =(lambda (key value) ...)= semantics
  #+BEGIN_SRC scheme :tangle test-alist-fold.scm :shebang #!/usr/bin/env chicken-scheme
    (use matchable srfi-1 test debug)
    
    (define (alist-fold alist f init)
      (fold (lambda (association accumulatum)
              (match association
                ((key . value)
                 (f key value accumulatum))))
            init
            alist))
    
    (test
     14
     (alist-fold
      '((1 2 3) (3 4 5))
      (lambda (key value accumulatum)
        (+ (apply + value) accumulatum))
      0))
  #+END_SRC

  multi-alist fold is tricky, because the keys might be different; i
  think what we want is an =alist-merge= followed by =alist-fold=.
* DONE module
  CLOSED: [2011-02-21 Mon 23:32]
  #+BEGIN_SRC scheme :tangle test-alist-lib.scm :shebang #!/usr/bin/env chicken-scheme
    (include "alist-lib.scm")
    (import alist-lib)
    (use debug test)
    (test '((1 2 3) (4 5 6))
          (alist-map (lambda (key value) (cons key value))
                     '((1 2 3)
                       (4 5 6))))
    
  #+END_SRC
* DONE =alist-set=
  CLOSED: [2011-02-21 Mon 23:17]
  just =alist-cons=
* DONE =alist-values=
  CLOSED: [2011-02-21 Mon 23:17]
  trivial map
  #+BEGIN_SRC scheme
    (define (alist-values alist)
      (map cdr alist))
  #+END_SRC
* DONE =alist-keys=
  CLOSED: [2011-02-21 Mon 23:17]
  trivial map
  #+BEGIN_SRC scheme
    (define (alist-keys alist)
      (map car alist))
  #+END_SRC
* DONE =alist-map=
  CLOSED: [2011-02-21 Mon 23:12]
  with =(lambda (key value) ...)= semantics
  #+BEGIN_SRC scheme
    (use srfi-1 test debug)
    
    (define (alist-values alist)
      (map cdr alist))
    
    (define (alist-keys alist)
      (map car alist))
    
    (define (alist-map f . alists)
      (apply map (cons (lambda key-values (f (alist-keys key-values)
                                             (alist-values key-values)))
                       alists)))
    
    
    (test
     "alist-map with three alists"
     '(((a e i) (b f j)) ((c g k) (d h l)))
     (alist-map (lambda (keys data) (list keys data))
                '((a . b) (c . d))
                '((e . f) (g . h))
                '((i . j) (k . l))))
  #+END_SRC
* DONE =alist-update!=
# <<alist-update!>>
  CLOSED: [2010-02-02 Tue 05:53]
  - CLOSING NOTE [2010-02-02 Tue 05:53] \\
    on the basis of set-cdr! and alist-set!
  #+BEGIN_SRC scheme
    (use srfi-1 test)
    (let ((alist '((a . b) (c . d))))
      (set-cdr! (assq 'a alist) 2)
      (test
       "set-cdr! on assq"
       alist
       '((a . 2) (c . d))))
  #+END_SRC

  if key doesn't exist, falls back on =alist-set!=
  (i.e. =alist-prepend!=).

  #+BEGIN_SRC org
    ,- alist-update! 
    ,  - case-lambda
    ,    - alist key function
    ,      - alist-update! alist key function error "key not found" key
    ,    - alist key function thunk
    ,      - alist-update! key function thunk eqv?
    ,    - alist key function thunk =
    ,      - let
    ,        - pair assoc key alist =
    ,          - if pair
    ,            - set-cdr! pair function cdr pair
    ,            - alist-set! alist key function thunk
    
    ,- alist-update!/default
    ,  - case-lambda
    ,    - alist key function default
    ,      - alist-update!/default alist key function default eqv?
    ,    - alist key function default =
    ,      - alist-update! alist key function lambda default =
  #+END_SRC

  #+BEGIN_SRC scheme
    (use srfi-1 test)
    
    (define (alist-prepend! alist key value)
      (let ((cell (cons key value)))
        (if (null? alist)
            (list cell)
            (begin
              ;; thanks, Stefan Ljungstrand; for the destructive prepense
              ;; sans LIST-COPY
              (set-cdr! alist (cons (car alist) (cdr alist)))
              (set-car! alist cell)))))
    
    (define alist-set! alist-prepend!)
    
    (define alist-update!
      (case-lambda
       ((alist key function)
        (alist-update! alist
                       key
                       function
                       (lambda ()
                         (error "Key not found -- ALIST-UPDATE!" key))))
       ((alist key function thunk)
        (alist-update! alist
                       key
                       function
                       thunk
                       eqv?))
       ((alist key function thunk =)
        (let ((pair (assoc key alist =)))
          (if pair
              (set-cdr! pair (function (cdr pair)))
              (alist-set! alist key (function (thunk))))))))
    
    (define alist-update!/default
      (case-lambda
       ((alist key function default)
        (alist-update!/default alist key function default eqv?))
       ((alist key function default =)
        (alist-update! alist key function (lambda () default)))))
    
    (let ((alist '((a . 1) (b . 2))))
      (test-error
       "alist-update! on non-extant key with no thunk"
       (alist-update! alist 'c (lambda (datum) 1)))
      (test
       "alist-update! on non-extant key with thunk"
       (begin
         (alist-update! alist 'c (lambda (datum) 1) (lambda () 1))
         alist)
       '((c . 1) (a . 1) (b . 2)))
      (test
       "alist-update! on extant key"
       '((c . 1) (a . 2) (b . 2))
       (begin
         (alist-update! alist 'a (lambda (datum) (+ datum 1)))
         alist))
      (test
       "alist-update! on extant key with thunk and ="
       '((c . 1) (a . 2) (b . 3))
       (begin
         (alist-update! alist
                        'b
                        (lambda (datum) (+ datum 1))
                        (lambda () 3) eqv?)
         alist))
      (test
       "alist-update!/default on non-extant key"
       '((d . 2) (c . 1) (a . 2) (b . 3))
       (begin
         (alist-update!/default alist 'd (lambda (datum) (+ datum 1)) 1)
         alist))
      (test
       "alist-update!/default on extant key with ="
       '((d . 3) (c . 1) (a . 2) (b . 3))
       (begin
         (alist-update!/default alist 'd (lambda (datum) (+ datum 1)) 1 eqv?)
         alist)))
  #+END_SRC
* DONE =alist-set!=
  CLOSED: [2010-02-01 Mon 08:25]
  - CLOSING NOTE [2010-02-01 Mon 08:26] \\
    can we call this done? with the =alist-set!= $\rightarrow$
    =alist-prepend!= semantics; and as long as =list-copy= is acceptable, yes.
  /see [[alist-update!]] for the canonical =alist-set!=./

  maybe the semantics of =alist-set!= can be equivalent to
  =set-car!= + =alist-cons=; leave updating to =alist-update!=? on the
  other hand, =vector-set!= semantics. hmm; let's follow srfi-69:
  =alist-set!= would indeed do a (possibly) destructive value update
  on a specific key irregardless of its previous value; it's like a
  blind =alist-update!=. relevant?

  in other words, =alist-set!= seems like a special case of
  =alist-update!=; or is it the other way around?

  #+BEGIN_SRC org
    ,- alist-set!
    ,  - case-lambda
    ,    - alist key value
    ,      - alist-set! alist key value eqv?
    ,    - alist key value =
    ,      - let
    ,        - pair assoc key alist =
    ,          - if value
    ,            - set-cdr! pair
    ,            - 
  #+END_SRC
  
  shit, how to deal with repeated keys here; we're not doing a
  hash-table, so theoretically repeated keys should be allowed. hmm;
  seems like we need a unique key policy.

  if we don't enforce unique keys, why not just =alist-cons= +
  =set-car!= (or whatever)? otherwise, if we do enforce unique keys
  (why?); =alist-delete!= will delete all such keys.

  why not have =alist-set!= set the first applicable key? that way, we
  can do a =set-cdr!=, etc.

  how does =set-car!= behave an on alist?

  is there a way to implement this without copying the fucking list?
  can we copy car?

  #+BEGIN_SRC scheme
    (use srfi-1 test)
    
    (define (alist-prepend! alist key value)
      (let ((cell (cons key value)))
        (if (null? alist)
            (list cell)
            (begin
              (set-cdr! alist (list-copy alist))
              (set-car! alist cell)))))
    
    (let ((alist '((1 . 2) (3 . 4) (5 . 6))))
      (alist-prepend! alist 7 8)
      (test
       "alist-prepend!"
       alist
       '((7 . 8) (1 . 2) (3 . 4) (5 . 6))))
  #+END_SRC

  =alist-set!= merely prepends; =alist-update!= guarantees unique keys.

  #+BEGIN_SRC scheme
    (use srfi-1)
    (let ((l '(1 2 3)))
      (set-cdr! l (list-copy l))
      (set-car! l 4)
      l)
  #+END_SRC
* DONE =alist-ref{,/default}=
  CLOSED: [2010-01-25 Mon 07:02]
  - CLOSING NOTE [2010-01-25 Mon 07:02] \\
    reasonable first pass
  srfi-1, srfi-16 and srfi-23 semantics

  #+BEGIN_SRC org
    ,- alist-ref 
    ,  - case-lambda
    ,    - alist key
    ,      - alist-ref alist key lambda error "key not found" key
    ,    - alist key thunk
    ,      - alist-ref alist key thunk eqv?
    ,    - alist key thunk =
    ,      - let
    ,        - value assoc key alist =
    ,          - or value (thunk)
  #+END_SRC

  how does alist-ref currently behave w.r.t. to unfound keys?

  #+BEGIN_SRC scheme
    (use test)
    (test
     "alist-ref on non-extant key"
     #f
     (alist-ref 'harro '((1 . 2))))
  #+END_SRC

  ah, returns #f; also, our parameter-order is incongruous with
  existing alist-ref and assoc; resembles srfi-69's ref.

  #+BEGIN_SRC scheme
    (use test)
    
    (define alist-ref
      (case-lambda
       ((alist key)
        (alist-ref alist key (lambda ()
                               (error "Key not found -- ALIST-REF" key))))
       ((alist key thunk)
        (alist-ref alist key thunk eqv?))
       ((alist key thunk =)
        (let ((value (assoc key alist =)))
          (or (and value (cdr value))
              (thunk))))))
    
    (define alist-ref/default
      (case-lambda
       ((alist key default)
        (alist-ref alist key (lambda () default)))
       ((alist key default =)
        (alist-ref alist key (lambda () default) =))))
    
    (let ((alist '((1 . 2))))
      (test
       "alist-ref: extant key"
       2
       (alist-ref alist 1))
      (test-error
       "alist-ref: non-extant key, no default"
       (alist-ref alist 2))
      (test
       "alist-ref: non-extant key, thunk"
       3
       (alist-ref alist 2 (lambda () 3)))
      (test
       "alist-ref: =, thunk"
       3
       (alist-ref alist 1 (lambda () 3) (complement eqv?)))
      (test
       "alist-ref/default"
       2
       (alist-ref/default alist 1 3))
      (test
       "alist-ref/default: non-extant key"
       3
       (alist-ref/default alist 2 3))
      (test
       "alist-ref/default: default, ="
       3
       (alist-ref/default alist 1 3 (complement eqv?))))
  #+END_SRC
** leppie's rewrite
   http://paste.lisp.org/display/91332
* DONE scope
  CLOSED: [2010-01-25 Mon 07:02]
  - CLOSING NOTE [2010-01-25 Mon 07:02] \\
    defined
  really, i just want to standardize =alist-ref=; other interesting
  things: =alist-ref/default=, =alist-set!=, =alist-update!=,
  =alist-exists?=, =alist-update!{,default}=, =alist-keys=,
  =alist-values=, =alist-for-each= (dyadic), =alist-map=, =alist-fold=
  (dyadic), =alist-unfold= (maybe), =make-alist= (maybe),
  =tabulate-alist= (maybe), =alist-merge= (what would this do
  differently from =lset-union=? fuck it), etc.
* DONE [[http://srfi.schemers.org/srfi-69/srfi-69.html][srfi-69]]-based functions
  CLOSED: [2010-01-25 Mon 07:02]
  - CLOSING NOTE [2010-01-25 Mon 07:02] \\
    defining our scope
  - =alist?=
  - =alist-ref=
  - =alist-ref/default=
  - =alist-set!=
  - =alist-delete!=
  - =alist-exists?=
  - =alist-update!=
  - =alist-update!/default=
  - =alist-size=
  - =alist-keys=
  - =alist-values=
  - =alist-walk=
    #+BEGIN_QUOTE
    Note: in some implementations, there is a procedure called
    =hash-table-map= which does the same as this procedure. However,
    in other implementations, =hash-table-map= does something else. In
    no implementation that I know of, =hash-table-map= does a real
    functorial map that lifts an ordinary function to the domain of
    hash tables. Because of these reasons, =hash-table-map= is left
    outside this SRFI.
    #+END_QUOTE

    why not =alist-for-each= and =alist-map=? maybe we should consult
    [[http://srfi.schemers.org/srfi-43/srfi-43.html][vector-lib]], too.
  - =alist-fold=
  - =alist-copy=

    do we really need this? aren't there [[http://srfi.schemers.org/srfi-1/srfi-1.html#list-copy][=list-copy=]] mechanisms from srfi-1?
  - =alist-merge!=

    something along the lines of [[http://srfi.schemers.org/srfi-1/srfi-1.html#lset-union][=lset-union=]]?
* DONE [[http://srfi.schemers.org/srfi-43/srfi-43.html][srfi-43]]-based functions
  CLOSED: [2010-01-25 Mon 07:02]
  - CLOSING NOTE [2010-01-25 Mon 07:02] \\
    stick to srfi-69
  - =make-alist=
  - =alist-unfold=
  - =alist-unfold-right=
  - =alist-copy=

    just synonimize whatever srfi-1 equivalent
  - =alist-reverse-copy=
  - =alist-append=
  - =alist-concatenate=

    these things have srfi-1 equivalents
  - =alist?=

    should we divine list of lists?
  - =alist-empty?=

    =null?=
  - =alist==

    =equal?=
  - =alist-ref=
  - =alist-length=

    length
  - =alist-fold=
  - =alist-fold-right=
  - =alist-map=
  - =alist-map!=
  - =alist-for-each=
  - =alist-count=
  - =alist-index=
  - =alist-index-right=
  - =alist-skip=
  - =alist-skip-right=
  - =alist-binary-search=
  - =alist-any=

    could be a dyad?
  - =alist-every=

    v. supra: dyad?
  - =alist-set!=

    srfi-69 semantics are superior
  - =alist-swap!=

    relevant? not in srfi-1, for instance.
  - =alist-fill!=

    relevant? =make-list=, etc. look to srfi-1 for an =alist-tabulate=?
  - =alist-reverse!=

    srfi-1
  - =alist-copy!=

    interestingly, srfi-1 already has an [[http://srfi.schemers.org/srfi-1/srfi-1.html#alist-copy][=alist-copy=]]; in addition to
    =alist-cons=, =alist-delete=, =alist-delete!=. would be nice if we
    could restrict the scope to hash-table-like things.
  - =alist-reverse-copy!=

    not in srfi-1, for instance; relevant?
* DONE [[http://srfi.schemers.org/srfi-1/srfi-1.html#Miscellaneous][srfi-1]]-like functions
  CLOSED: [2010-01-25 Mon 07:01]
  - CLOSING NOTE [2010-01-25 Mon 07:02] \\
    stick to srfi-69
  - =alist-append=

    this is just append
  - =alist-zip=

    this is just zip? what about dyadism?
  - =alist-count=

    fuck it; let's limit the scope to srfi-69-like things. although,
    =append-maps= and =filter-maps= are cool.
  - =alist-remove=

    we already have =alist-delete=.
  - =alist-{every,any}=

    we already have =every=, =any=.
* CANCELED =alist-copy=
  CLOSED: [2010-02-02 Tue 06:23]
  just =list-copy=
* CANCELED =alist-size=
  CLOSED: [2010-02-02 Tue 06:23]
  just =length=
